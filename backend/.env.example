# ============================================
# DATABASE CONFIGURATION
# ============================================
DATABASE_URL="postgresql://user:password@localhost:5432/lumiku_db?schema=public"

# ============================================
# JWT CONFIGURATION - CRITICAL SECURITY
# ============================================
# IMPORTANT: The JWT_SECRET is used to sign and verify authentication tokens.
# A weak or compromised secret allows attackers to:
# - Forge authentication tokens
# - Hijack user accounts
# - Bypass all authentication
#
# REQUIREMENTS:
# - Production: MUST be set, minimum 32 characters, high entropy
# - Development: Can be auto-generated, but setting it persists sessions
# - Test: Can use test-specific secrets
#
# GENERATE A SECURE SECRET:
# Run this command to generate a cryptographically secure secret:
#   node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
#
# Or on Unix systems:
#   openssl rand -hex 32
#
# SECURITY BEST PRACTICES:
# 1. Never commit your actual secret to version control
# 2. Use different secrets for different environments
# 3. Rotate secrets periodically (every 90 days recommended)
# 4. Store in secure secret management (AWS Secrets Manager, HashiCorp Vault, etc.)
# 5. Minimum 32 characters (64+ recommended)
# 6. Use cryptographically random generation (not keyboard mashing!)
#
JWT_SECRET="REPLACE_WITH_GENERATED_SECRET_MINIMUM_32_CHARACTERS"

# JWT token expiration time (default: 7 days)
# Format: https://github.com/vercel/ms
# Examples: "60s", "2m", "1h", "7d", "30d"
JWT_EXPIRES_IN="7d"

# ============================================
# SERVER CONFIGURATION
# ============================================
PORT=3000

# Storage
UPLOAD_DIR="./uploads"
OUTPUT_DIR="./uploads/outputs"

# Redis Configuration (for Background Queue)
# Option 1: Local Redis
REDIS_HOST="localhost"
REDIS_PORT="6379"
REDIS_PASSWORD=""

# Option 2: Cloud Redis (Upstash, Redis Cloud, etc.)
# REDIS_HOST="your-redis-host.upstash.io"
# REDIS_PORT="6379"
# REDIS_PASSWORD="your-redis-password"

# FFmpeg (ensure it's installed and in PATH)
# Windows: Download from https://www.gyan.dev/ffmpeg/builds/
# Mac: brew install ffmpeg
# Linux: sudo apt install ffmpeg

# ============================================
# RATE LIMITING CONFIGURATION
# ============================================
# Rate limiting protects authentication endpoints from brute force attacks
# and prevents abuse of the API.

# Enable/disable rate limiting (default: true)
RATE_LIMIT_ENABLED="true"

# Login endpoint rate limits (IP-based)
# Default: 5 attempts per 15 minutes
RATE_LIMIT_LOGIN_WINDOW_MS="900000"
RATE_LIMIT_LOGIN_MAX_ATTEMPTS="5"

# Registration endpoint rate limits (IP-based)
# Default: 3 attempts per hour
RATE_LIMIT_REGISTER_WINDOW_MS="3600000"
RATE_LIMIT_REGISTER_MAX_ATTEMPTS="3"

# Password reset rate limits (IP-based)
# Default: 3 attempts per hour
RATE_LIMIT_PASSWORD_RESET_WINDOW_MS="3600000"
RATE_LIMIT_PASSWORD_RESET_MAX_ATTEMPTS="3"

# Profile update rate limits
# Default: 10 attempts per hour
RATE_LIMIT_PROFILE_UPDATE_WINDOW_MS="3600000"
RATE_LIMIT_PROFILE_UPDATE_MAX_ATTEMPTS="10"

# Account lockout settings (account-based)
# Lock account after too many failed login attempts
RATE_LIMIT_ACCOUNT_LOCKOUT_ATTEMPTS="10"
RATE_LIMIT_ACCOUNT_LOCKOUT_DURATION_MS="1800000"

# Global rate limits (system-wide protection)
# Default: 1000 auth requests per minute (system-wide)
RATE_LIMIT_GLOBAL_AUTH_WINDOW_MS="60000"
RATE_LIMIT_GLOBAL_AUTH_MAX_REQUESTS="1000"

# Redis URL for distributed rate limiting
# If not set, falls back to in-memory storage (not recommended for production)
RATE_LIMIT_REDIS_URL=""

# ============================================
# POSE GENERATOR CONFIGURATION
# ============================================
# External AI APIs
HUGGINGFACE_API_KEY="hf_your_huggingface_api_key_here"

# Worker Configuration
WORKER_CONCURRENCY="5"
WORKER_NAME="pose-generator-worker-1"

# CORS Origin for WebSocket
CORS_ORIGIN="http://localhost:5173"

# Node Environment
NODE_ENV="development"

# ============================================
# STORAGE CONFIGURATION (Phase 4A)
# ============================================
# Storage mode: 'local' for filesystem, 'r2' for Cloudflare R2
# Default: local (recommended for initial deployment)
# Change to 'r2' when ready to migrate to cloud storage
STORAGE_MODE="local"

# Local storage path (used when STORAGE_MODE=local)
# Production: /app/backend/uploads (requires volume mount in Coolify)
# Development: ./backend/uploads
UPLOAD_PATH="/app/backend/uploads"

# ============================================
# CLOUDFLARE R2 CONFIGURATION (Optional - Future Migration)
# ============================================
# Only required when STORAGE_MODE=r2
# Leave empty for local storage mode

# Cloudflare Account ID
# Find in: Cloudflare Dashboard > R2 > Settings
R2_ACCOUNT_ID=""

# R2 Access Key ID and Secret
# Create in: Cloudflare Dashboard > R2 > API Tokens
R2_ACCESS_KEY_ID=""
R2_SECRET_ACCESS_KEY=""

# R2 Bucket name for pose storage
# Create bucket first, then enter name here
R2_BUCKET_NAME="lumiku-poses"

# R2 Public URL for serving files
# Configure custom domain in R2 dashboard for production
# Example: https://poses.lumiku.com or https://pub-xxxxx.r2.dev
R2_PUBLIC_URL=""
