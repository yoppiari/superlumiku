generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id       String  @id @default(cuid())
  email    String  @unique
  password String
  name     String?
  role     String  @default("user") // user, admin

  // Storage quota (in bytes)
  storageQuota Int @default(1073741824) // 1GB default (1024*1024*1024)
  storageUsed  Int @default(0) // Current usage in bytes

  // NEW: Account Type & Subscription
  accountType      String  @default("payg") // "subscription" | "payg"
  subscriptionTier String  @default("free") // "free" | "basic" | "pro" | "enterprise"
  userTags         String? // JSON array: ["enterprise_unlimited", "beta_tester"]

  // Pose Generator Unlimited Tier
  unlimitedPoseActive       Boolean   @default(false)
  unlimitedPoseDailyQuota   Int       @default(100)
  unlimitedPoseQuotaUsed    Int       @default(0)
  unlimitedPoseQuotaResetAt DateTime?
  unlimitedPoseExpiresAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  credits               Credit[]
  sessions              Session[]
  devices               Device[]
  appUsages             AppUsage[]
  subscription          Subscription? // NEW
  quotaUsages           QuotaUsage[] // NEW
  modelUsages           ModelUsage[] // NEW
  poseGeneratorProjects PoseGeneratorProject[]
  poseGenerations       PoseGeneration[]
  poseRequests          PoseRequest[]

  @@index([role]) // Query users by role (admin dashboard)
  @@index([accountType]) // Filter by account type
  @@index([subscriptionTier]) // Filter by subscription tier
  @@index([createdAt]) // Sort users by registration date
  @@map("users")
}

// Session Management
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // FK index for joins and CASCADE deletes
  @@index([expiresAt]) // Cleanup expired sessions efficiently
  @@index([userId, expiresAt]) // Composite: find active sessions per user
  @@map("sessions")
}

// Device Management
model Device {
  id         String   @id @default(cuid())
  userId     String
  deviceId   String // Unique device identifier (browser fingerprint)
  deviceName String // e.g., "Chrome on Windows"
  deviceType String // desktop, mobile, tablet
  browser    String?
  os         String?
  ipAddress  String?
  userAgent  String?
  lastActive DateTime @default(now())

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId])
  @@index([userId]) // FK index for joins
  @@index([lastActive]) // Find inactive devices for cleanup
  @@index([userId, lastActive]) // Composite: recently active devices per user
  @@map("devices")
}

// Credit System
model Credit {
  id          String  @id @default(cuid())
  userId      String
  amount      Int // Positive for addition, negative for deduction
  balance     Int // Running balance after this transaction
  type        String // purchase, bonus, usage, refund
  description String?

  // Reference to what used the credits
  referenceId   String?
  referenceType String? // video_mix_project, carousel_generation, etc.

  // Payment reference (for purchases)
  paymentId String?

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // FK index for joins
  @@index([userId, createdAt(sort: Desc)]) // Composite: credit history per user (most common query)
  @@index([type]) // Filter transactions by type
  @@index([referenceId, referenceType]) // Composite: find credits for specific generation
  @@index([paymentId]) // Link credits to payments
  @@index([createdAt]) // Time-based analytics
  @@map("credits")
}

// Payment Transactions (Duitku)
model Payment {
  id              String @id @default(cuid())
  userId          String
  merchantOrderId String @unique
  reference       String @unique // Duitku reference

  amount       Float
  creditAmount Int // Credits purchased

  status        String // pending, success, failed, expired
  paymentMethod String?
  paymentUrl    String?

  // Duitku specific
  duitkuData String? // JSON string of Duitku response

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId]) // Find payments by user
  @@index([status]) // Filter by payment status
  @@index([userId, status]) // Composite: user's successful payments
  @@index([createdAt]) // Sort by payment date
  @@index([userId, createdAt(sort: Desc)]) // Composite: user payment history
  @@map("payments")
}

// Tool Registry (optional - could be code-based)
model ToolConfig {
  id      String  @id @default(cuid())
  toolId  String  @unique
  name    String
  enabled Boolean @default(true)
  config  String // JSON config

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([enabled]) // Filter enabled tools
  @@map("tool_configs")
}

// ========================================
// Plugin Architecture
// ========================================

// App Registry (Optional - mainly for stats tracking)
// Note: Plugins are registered in-memory via plugin system
model App {
  id                   String  @id @default(cuid())
  appId                String  @unique // 'project-manager', 'invoice-generator'
  name                 String
  description          String?
  icon                 String // Lucide icon name
  enabled              Boolean @default(true)
  beta                 Boolean @default(false)
  comingSoon           Boolean @default(false)
  creditCostBase       Int     @default(1)
  requiresSubscription Boolean @default(false)
  minSubscriptionTier  String? // 'basic', 'pro', 'enterprise'
  version              String  @default("1.0.0")

  // Stats
  totalUsage  Int @default(0)
  activeUsers Int @default(0)

  // Dashboard
  dashboardOrder Int    @default(0)
  dashboardColor String @default("blue")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([enabled])
  @@index([dashboardOrder])
  @@map("apps")
}

// App Usage Tracking
model AppUsage {
  id         String  @id @default(cuid())
  userId     String
  appId      String // Plugin appId (not FK - plugins are in-memory)
  action     String // 'create_project', 'generate_invoice'
  creditUsed Int
  metadata   String? // JSON string

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // FK index
  @@index([appId]) // Filter by app
  @@index([createdAt]) // Time-based analytics
  @@index([userId, appId]) // Composite: user's usage per app
  @@index([userId, createdAt(sort: Desc)]) // Composite: user's recent activity
  @@index([appId, createdAt]) // Composite: app usage over time
  @@map("app_usages")
}

// ========================================
// Video Mixer App Models
// ========================================

model VideoMixerProject {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  groups      VideoMixerGroup[]
  videos      VideoMixerVideo[]
  generations VideoMixerGeneration[]

  @@index([userId]) // Find user's projects
  @@index([userId, createdAt(sort: Desc)]) // Composite: user's recent projects (most common query)
  @@index([userId, updatedAt(sort: Desc)]) // Composite: recently modified projects
  @@map("video_mixer_projects")
}

model VideoMixerGroup {
  id        String   @id @default(cuid())
  projectId String
  name      String
  order     Int      @default(0) // Order of group in sequence
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project VideoMixerProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  videos  VideoMixerVideo[]

  @@index([projectId]) // FK index
  @@index([projectId, order]) // Composite: ordered groups (common query)
  @@map("video_mixer_groups")
}

model VideoMixerVideo {
  id        String   @id @default(cuid())
  projectId String
  groupId   String? // Optional: video can belong to a group
  fileName  String
  filePath  String // Path to uploaded video file
  fileSize  Int // File size in bytes
  duration  Float // Duration in seconds
  mimeType  String
  order     Int      @default(0) // Order within group or project
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project VideoMixerProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  group   VideoMixerGroup?  @relation(fields: [groupId], references: [id], onDelete: SetNull)

  @@index([projectId]) // FK index
  @@index([groupId]) // FK index
  @@index([projectId, order]) // Composite: ordered videos in project
  @@index([groupId, order]) // Composite: ordered videos in group
  @@map("video_mixer_videos")
}

model VideoMixerGeneration {
  id                String  @id @default(cuid())
  projectId         String
  userId            String
  totalVideos       Int // Number of videos to generate
  settings          String // JSON: { shuffle, fixedStart, groupShuffle, speed }
  creditUsed        Int // Total credits used
  status            String  @default("pending") // pending, processing, completed, failed
  outputPaths       String? // JSON array of generated video paths
  estimatedDuration Float? // Estimated duration of each video

  // Mixing Options (Anti-Fingerprinting)
  enableOrderMixing     Boolean @default(true)
  enableDifferentStart  Boolean @default(false)
  fixedStartVideoId     String?
  enableGroupMixing     Boolean @default(false)
  groupMixingMode       String  @default("sequential") // sequential, random
  enableSpeedVariations Boolean @default(false)
  speedMin              Float   @default(0.5)
  speedMax              Float   @default(2.0)

  // Quality Settings
  metadataSource  String @default("capcut") // capcut, tiktok, instagram, youtube
  videoBitrate    String @default("medium") // low, medium, high
  videoResolution String @default("720p") // 480p, 720p, 1080p, 4k
  frameRate       Int    @default(30) // 24, 30, 60
  aspectRatio     String @default("16:9") // 9:16, 16:9, 1:1, 4:5

  // Duration Settings
  durationType      String  @default("original") // original, fixed
  fixedDuration     Int? // seconds
  smartDistribution Boolean @default(false)
  distributionMode  String  @default("proportional") // proportional, equal, weighted

  // Audio Options
  audioOption String @default("keep") // keep, mute

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  project VideoMixerProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId]) // FK index
  @@index([userId]) // Find user's generations
  @@index([status]) // Filter by status (pending, processing, completed, failed)
  @@index([projectId, createdAt(sort: Desc)]) // Composite: project's recent generations
  @@index([userId, status]) // Composite: user's pending/completed generations
  @@index([userId, createdAt(sort: Desc)]) // Composite: user's recent generations
  @@index([status, createdAt]) // Composite: process pending jobs in order
  @@map("video_mixer_generations")
}

// ========================================
// Carousel Mix App Models
// ========================================

model CarouselProject {
  id               String   @id @default(cuid())
  userId           String
  name             String
  description      String?
  defaultNumSlides Int      @default(4) // Default carousel length (2-8)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  slides           CarouselSlide[]
  texts            CarouselText[]
  generations      CarouselGeneration[]
  positionSettings CarouselPositionSettings[]

  @@index([userId]) // Find user's projects
  @@index([userId, createdAt(sort: Desc)]) // Composite: user's recent projects
  @@index([userId, updatedAt(sort: Desc)]) // Composite: recently modified projects
  @@map("carousel_projects")
}

model CarouselSlide {
  id            String   @id @default(cuid())
  projectId     String
  slidePosition Int      @default(1) // Which position in carousel (1, 2, 3, ..., N)
  fileName      String
  filePath      String
  fileType      String // 'image' or 'video'
  fileSize      Int // bytes
  width         Int? // Image width in pixels
  height        Int? // Image height in pixels
  thumbnail     String? // Thumbnail path for preview
  order         Int // Display order within same position (for UI sorting)
  createdAt     DateTime @default(now())

  project CarouselProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([projectId, slidePosition])
  @@map("carousel_slides")
}

model CarouselText {
  id            String   @id @default(cuid())
  projectId     String
  slidePosition Int      @default(1) // Which position in carousel (1, 2, 3, ..., N)
  content       String // Only text content - styling moved to CarouselPositionSettings
  order         Int // Display order within same position (for UI sorting)
  createdAt     DateTime @default(now())

  project CarouselProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([projectId, slidePosition])
  @@map("carousel_texts")
}

// Position-level text styling settings (shared across all text variations in a position)
model CarouselPositionSettings {
  id            String @id @default(cuid())
  projectId     String
  slidePosition Int // Position number (1, 2, 3, ..., N)

  // Text Style Settings (shared across all text variations in this position)
  fontFamily      String @default("Inter")
  fontSize        Int    @default(32) // Deprecated - kept for backward compatibility
  fontSizePercent Float  @default(4.5) // Font size as % of image height (NEW)
  fontColor       String @default("#FFFFFF")
  fontWeight      Int    @default(700)
  backgroundColor String @default("rgba(0, 0, 0, 0.5)")

  // Text Position Settings
  textPosition  String @default("center") // preset: center, top-left, top-center, etc.
  textAlignment String @default("center") // left, center, right, justify
  positionX     Int    @default(50) // X position percentage (0-100)
  positionY     Int    @default(50) // Y position percentage (0-100)

  // Advanced Styling (JSON)
  textShadow  String? // JSON: { offsetX, offsetY, blur, color }
  textOutline String? // JSON: { width, color }
  paddingData String? // JSON: { top, right, bottom, left }

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project CarouselProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, slidePosition])
  @@index([projectId])
  @@map("carousel_position_settings")
}

model CarouselGeneration {
  id               String @id @default(cuid())
  projectId        String
  userId           String
  status           String @default("pending") // pending, processing, completed, failed
  numSlides        Int // 2, 4, 6, or 8
  numSetsGenerated Int // How many carousel sets were generated
  creditUsed       Int

  // Text Variation Settings
  textVariationAlgo     String? @default("sequential") // random, sequential, weighted
  textVariationSettings String? // JSON string with algorithm-specific settings

  // Output
  outputPath   String? // Path to ZIP file
  outputPaths  String? // JSON array of individual file paths
  errorMessage String?

  createdAt   DateTime  @default(now())
  completedAt DateTime?

  project CarouselProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId]) // FK index
  @@index([userId]) // Find user's generations
  @@index([status]) // Filter by status
  @@index([projectId, createdAt(sort: Desc)]) // Composite: project's recent generations
  @@index([userId, status]) // Composite: user's pending/completed generations
  @@index([userId, createdAt(sort: Desc)]) // Composite: user's recent generations
  @@index([status, createdAt]) // Composite: process pending jobs in order
  @@map("carousel_generations")
}

// ========================================
// Looping Flow App Models
// ========================================

model LoopingFlowProject {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  videos      LoopingFlowVideo[]
  generations LoopingFlowGeneration[]

  @@index([userId]) // Find user's projects
  @@index([userId, createdAt(sort: Desc)]) // Composite: user's recent projects
  @@index([userId, updatedAt(sort: Desc)]) // Composite: recently modified projects
  @@map("looping_flow_projects")
}

model LoopingFlowVideo {
  id        String   @id @default(cuid())
  projectId String
  fileName  String
  filePath  String // Path to uploaded video file
  fileSize  Int // File size in bytes
  duration  Float // Duration in seconds
  mimeType  String
  createdAt DateTime @default(now())

  project LoopingFlowProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@map("looping_flow_videos")
}

model LoopingFlowGeneration {
  id             String    @id @default(cuid())
  projectId      String
  userId         String
  videoId        String // Reference to source video
  targetDuration Int // Target duration in seconds
  creditUsed     Int // Total credits used
  status         String    @default("pending") // pending, processing, completed, failed
  outputPath     String? // Path to generated looped video
  errorMessage   String?
  createdAt      DateTime  @default(now())
  completedAt    DateTime?

  // Package 1: Perfect Seamless Loop
  loopStyle         String  @default("crossfade") // simple, crossfade, boomerang
  crossfadeDuration Float   @default(1.0) // 0.5 - 2.0 seconds
  audioCrossfade    Boolean @default(true)
  videoCrossfade    Boolean @default(true)

  // Package 2: Multi-Layer Audio
  audioLayers  String? // JSON array of audio layer configs
  masterVolume Float   @default(100)
  audioFadeIn  Float   @default(2.0)
  audioFadeOut Float   @default(2.0)
  muteOriginal Boolean @default(false)

  project         LoopingFlowProject      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  audioLayerFiles LoopingFlowAudioLayer[]

  @@index([projectId]) // FK index
  @@index([userId]) // Find user's generations
  @@index([status]) // Filter by status
  @@index([videoId]) // Find generations for specific video
  @@index([projectId, createdAt(sort: Desc)]) // Composite: project's recent generations
  @@index([userId, status]) // Composite: user's pending/completed generations
  @@index([userId, createdAt(sort: Desc)]) // Composite: user's recent generations
  @@index([status, createdAt]) // Composite: process pending jobs in order
  @@map("looping_flow_generations")
}

model LoopingFlowAudioLayer {
  id           String                @id @default(cuid())
  generationId String
  generation   LoopingFlowGeneration @relation(fields: [generationId], references: [id], onDelete: Cascade)

  layerIndex Int // 0, 1, 2, 3
  fileName   String
  filePath   String
  fileSize   Int
  duration   Float
  volume     Float   @default(100)
  muted      Boolean @default(false)
  fadeIn     Float   @default(0)
  fadeOut    Float   @default(0)

  createdAt DateTime @default(now())

  @@index([generationId])
  @@map("looping_flow_audio_layers")
}

// ========================================
// DUAL USER SYSTEM: Subscription & Model-Level Access
// ========================================

// Central registry untuk semua AI models di semua apps
model AIModel {
  id String @id @default(cuid())

  // Model Identity
  appId    String // "video-generator", "poster-editor", etc
  modelId  String // "veo3", "kling-2.5", "wan2.2", etc
  modelKey String @unique // "video-generator:veo3"

  // Display Info
  name        String // "Google Veo 3"
  description String?
  provider    String // "modelslab", "edenai", "segmind"

  // Access Control (CORE!)
  tier    String // "free", "basic", "pro", "enterprise"
  enabled Boolean @default(true)
  beta    Boolean @default(false)

  // Pricing for PAYG users
  creditCost      Int // Base credit cost
  creditPerSecond Float? // For video: cost per second
  creditPerPixel  Float? // For image: cost per megapixel

  // Quota for Subscription users
  quotaCost Int @default(1) // Heavy models = 2-5 quota

  // Capabilities (JSON)
  capabilities String? // JSON: {maxDuration, resolutions, aspectRatios}

  // Stats
  totalUsage Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  modelUsages ModelUsage[]

  @@unique([appId, modelId])
  @@index([appId])
  @@index([tier])
  @@index([enabled])
  @@map("ai_models")
}

model SubscriptionPlan {
  id     String @id @default(cuid())
  planId String @unique // "basic-monthly", "pro-yearly"

  // Plan Info
  tier        String // "basic", "pro", "enterprise"
  name        String // "Pro Monthly"
  description String?

  // Pricing
  price        Float // Rupiah
  billingCycle String // "monthly", "yearly"

  // Quotas
  dailyQuota   Int // 100 generates per day
  monthlyQuota Int? // Optional monthly cap

  // Model Access
  // Models akan di-filter by tier, jadi tidak perlu list manual
  // tier "pro" bisa akses: free, basic, pro models
  maxModelTier String // "basic", "pro", "enterprise"

  // Features (JSON)
  features String? // JSON: {prioritySupport, customBranding, etc}

  // Status
  isActive     Boolean @default(true)
  displayOrder Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptions Subscription[]

  @@index([tier])
  @@index([isActive])
  @@map("subscription_plans")
}

model Subscription {
  id     String @id @default(cuid())
  userId String @unique
  planId String

  // Status
  status String // "active", "cancelled", "expired", "grace_period", "suspended"

  // Billing Period
  startDate    DateTime
  endDate      DateTime
  billingCycle String // "monthly", "yearly"

  // Auto-renewal
  autoRenew       Boolean   @default(true)
  nextBillingDate DateTime?

  // Payment
  lastPaymentId String?

  // Cancellation
  cancelledAt  DateTime?
  cancelReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan SubscriptionPlan @relation(fields: [planId], references: [id])

  @@index([planId]) // FK index for joins
  @@index([status]) // Filter by status
  @@index([endDate]) // Find expiring subscriptions
  @@index([status, endDate]) // Composite: active subscriptions expiring soon
  @@index([nextBillingDate]) // Find subscriptions due for renewal
  @@index([autoRenew, endDate]) // Composite: auto-renewable expiring subscriptions
  @@map("subscriptions")
}

model QuotaUsage {
  id     String @id @default(cuid())
  userId String

  // Period Tracking
  quotaType String // "daily", "monthly"
  period    String // "2025-01-15" for daily, "2025-01" for monthly

  // Usage
  usageCount Int @default(0) // Total quota used in period
  quotaLimit Int // From subscription plan

  // Breakdown by model (JSON)
  modelBreakdown String? // JSON: {"veo3": 50, "kling": 30, "wan22": 20}

  // Auto-reset
  resetAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, period, quotaType])
  @@index([userId, period])
  @@index([resetAt])
  @@map("quota_usages")
}

model ModelUsage {
  id       String @id @default(cuid())
  userId   String
  appId    String // "video-generator"
  modelKey String // "video-generator:veo3"

  // Usage Type
  usageType String // "credit" (PAYG) | "quota" (Subscription)

  // Cost/Quota
  creditUsed Int? // For PAYG users
  quotaUsed  Int? // For Subscription users (usually 1, heavy models = 2-5)

  // Action metadata
  action   String // "generate_video", "inpaint_poster", etc
  metadata String? // JSON: {duration: 5, resolution: "720p"}

  createdAt DateTime @default(now())

  // Relations
  user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  model AIModel @relation(fields: [modelKey], references: [modelKey], onDelete: Cascade)

  @@index([userId]) // FK index
  @@index([appId]) // Filter by app
  @@index([modelKey]) // FK index and filter by model
  @@index([createdAt]) // Time-based analytics
  @@index([userId, createdAt(sort: Desc)]) // Composite: user's recent usage
  @@index([appId, createdAt]) // Composite: app usage over time
  @@index([modelKey, createdAt]) // Composite: model usage over time
  @@index([userId, appId]) // Composite: user's usage per app
  @@index([userId, modelKey]) // Composite: user's usage per model
  @@index([usageType]) // Filter by PAYG vs Subscription
  @@map("model_usages")
}

// ========================================
// Avatar Creator App Models
// ========================================

model AvatarProject {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  avatars Avatar[]

  @@index([userId]) // Find user's projects
  @@index([userId, createdAt(sort: Desc)]) // Composite: user's recent projects
  @@index([userId, updatedAt(sort: Desc)]) // Composite: recently modified projects
  @@map("avatar_projects")
}

model Avatar {
  id        String @id @default(cuid())
  userId    String
  projectId String

  // Basic Info
  name         String
  baseImageUrl String
  thumbnailUrl String?

  // Persona (untuk prompt generation di apps lain)
  personaName        String?
  personaAge         Int?
  personaPersonality String? @db.Text // JSON: ["friendly", "professional"]
  personaBackground  String? @db.Text // Latar belakang

  // Visual Attributes
  gender    String?
  ageRange  String?
  ethnicity String?
  bodyType  String?
  hairStyle String?
  hairColor String?
  eyeColor  String?
  skinTone  String?
  style     String?

  // Generation Info
  sourceType       String // uploaded, text_to_image, from_preset, from_reference
  generationPrompt String? @db.Text
  seedUsed         Int?

  // Tracking
  usageCount Int       @default(0)
  lastUsedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project               AvatarProject          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  usageHistory          AvatarUsageHistory[]
  poseGeneratorProjects PoseGeneratorProject[]
  poseGenerations       PoseGeneration[]

  @@index([userId]) // Find user's avatars
  @@index([projectId]) // FK index
  @@index([sourceType]) // Filter by generation type
  @@index([userId, usageCount(sort: Desc)]) // Composite: user's most used avatars
  @@index([userId, lastUsedAt(sort: Desc)]) // Composite: user's recently used avatars
  @@index([userId, createdAt(sort: Desc)]) // Composite: user's recent avatars
  @@map("avatars")
}

model AvatarPreset {
  id               String  @id @default(cuid())
  name             String
  previewImageUrl  String
  category         String // business, casual, traditional, creative
  personaTemplate  String  @db.Text // JSON
  visualAttributes String  @db.Text // JSON
  generationPrompt String  @db.Text
  isPublic         Boolean @default(true)
  usageCount       Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category]) // Filter by category
  @@index([isPublic]) // Filter public presets
  @@index([category, isPublic]) // Composite: public presets by category
  @@index([usageCount(sort: Desc)]) // Sort by popularity
  @@map("avatar_presets")
}

model PersonaExample {
  id       String @id @default(cuid())
  name     String
  category String // business, creative, lifestyle, healthcare

  // Persona fields
  personaName        String
  personaAge         Int
  personaPersonality String @db.Text // JSON array
  personaBackground  String @db.Text

  // Visual suggestions (optional)
  suggestedAttributes String? @db.Text // JSON

  displayOrder Int     @default(0)
  isActive     Boolean @default(true)

  createdAt DateTime @default(now())

  @@index([category]) // Filter by category
  @@index([isActive]) // Filter active examples
  @@index([category, isActive, displayOrder]) // Composite: active examples by category, ordered
  @@map("persona_examples")
}

model AvatarUsageHistory {
  id            String  @id @default(cuid())
  avatarId      String
  userId        String
  appId         String
  appName       String
  action        String
  referenceId   String?
  referenceType String?
  metadata      String? @db.Text

  createdAt DateTime @default(now())

  avatar Avatar @relation(fields: [avatarId], references: [id], onDelete: Cascade)

  @@index([avatarId]) // FK index
  @@index([userId]) // Find user's usage
  @@index([appId]) // Filter by app
  @@index([avatarId, createdAt(sort: Desc)]) // Composite: avatar usage history
  @@index([userId, createdAt(sort: Desc)]) // Composite: user's recent avatar usage
  @@index([appId, createdAt]) // Composite: app's avatar usage over time
  @@index([referenceId, referenceType]) // Composite: find usage for specific reference
  @@map("avatar_usage_history")
}

model AvatarGeneration {
  id           String  @id @default(cuid())
  userId       String
  avatarId     String? // null until completed
  projectId    String
  status       String  @default("pending") // pending, processing, completed, failed
  prompt       String  @db.Text
  options      String? @db.Text // JSON
  errorMessage String? @db.Text

  createdAt   DateTime  @default(now())
  completedAt DateTime?

  @@index([userId]) // Find user's generations
  @@index([status]) // Filter by status
  @@index([projectId]) // Find generations for project
  @@index([avatarId]) // Link to created avatar
  @@index([userId, status]) // Composite: user's pending/completed generations
  @@index([userId, createdAt(sort: Desc)]) // Composite: user's recent generations
  @@index([status, createdAt]) // Composite: process pending jobs in order
  @@index([projectId, createdAt(sort: Desc)]) // Composite: project's recent generations
  @@map("avatar_generations")
}

// ========================================
// Pose Generator App Models
// ========================================

model PoseCategory {
  id          String  @id @default(cuid())
  name        String
  displayName String
  description String?
  slug        String  @unique
  parentId    String?

  // Display
  icon         String @default("folder")
  displayOrder Int    @default(0)
  color        String @default("#3b82f6")

  // Stats
  poseCount Int @default(0)

  // Status
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  parent       PoseCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     PoseCategory[] @relation("CategoryHierarchy")
  poses        PoseLibrary[]
  poseRequests PoseRequest[]

  @@index([parentId])
  @@index([isActive, displayOrder])
  @@index([slug])
  @@map("pose_categories")
}

model PoseLibrary {
  id          String  @id @default(cuid())
  name        String
  description String?
  categoryId  String

  // Media
  previewImageUrl    String
  referenceImageUrl  String
  controlnetImageUrl String // Pre-computed ControlNet pose map
  thumbnailUrl       String?

  // Metadata
  difficulty        String   @default("medium") // beginner, intermediate, advanced
  genderSuitability String   @default("unisex") // male, female, unisex
  tags              String[] // Standing, professional, full-body

  // Source
  sourceType   String  @default("curated") // curated, user_contributed, ai_generated
  sourceCredit String?
  licenseType  String  @default("platform")

  // Popularity
  usageCount      Int   @default(0)
  favoriteCount   Int   @default(0)
  ratingAvg       Float @default(0.0)
  popularityScore Int   @default(0) // Computed: usageCount + favoriteCount

  // Status
  isPublic   Boolean @default(true)
  isFeatured Boolean @default(false)
  isPremium  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  category       PoseCategory    @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  generatedPoses GeneratedPose[]
  poseSelections PoseSelection[]

  @@unique([categoryId, name])
  @@index([categoryId])
  @@index([difficulty])
  @@index([isPublic, popularityScore])
  @@index([isFeatured, usageCount(sort: Desc)])
  @@index([tags], type: Gin)
  @@map("pose_library")
}

model PoseGeneratorProject {
  id          String  @id @default(cuid())
  userId      String
  projectName String
  description String?

  // Avatar Integration
  avatarImageUrl String?
  avatarSource   String  @default("upload") // AVATAR_CREATOR | UPLOAD
  avatarId       String?

  // Stats
  totalGenerations    Int @default(0)
  totalPosesGenerated Int @default(0)

  // Status
  status String @default("active") // active, archived, deleted

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatar      Avatar?          @relation(fields: [avatarId], references: [id], onDelete: SetNull)
  generations PoseGeneration[]

  @@index([userId])
  @@index([userId, updatedAt(sort: Desc)])
  @@index([avatarId])
  @@index([status])
  @@map("pose_generator_projects")
}

model PoseGeneration {
  id        String @id @default(cuid())
  projectId String
  userId    String

  // Input Mode
  generationType         String // GALLERY_REFERENCE | TEXT_DESCRIPTION
  textPrompt             String? @db.Text
  generatedPoseStructure String? @db.Text // AI-generated pose description (for text mode)

  // Avatar Context
  avatarId         String?
  avatarAttributes String? @db.Text // JSON: {gender, age, ethnicity, style}

  // Generation Settings
  batchSize          Int // Variations per pose
  totalExpectedPoses Int

  // Background Changer (optional add-on)
  useBackgroundChanger Boolean @default(false)
  backgroundPrompt     String? @db.Text
  backgroundMode       String? // ai_generate, solid_color, upload

  // Output Settings
  exportFormats String[] // instagram_story, tiktok, shopee

  // Status Tracking
  status         String @default("pending") // pending, processing, completed, failed, partial
  progress       Int    @default(0) // 0-100
  posesCompleted Int    @default(0)
  posesFailed    Int    @default(0)

  // Credit Tracking (uses unified Credit service)
  creditCharged  Int
  creditRefunded Int @default(0)

  // Queue Management
  queueJobId String? // BullMQ job ID

  // Results
  errorMessage String? @db.Text

  // Timestamps
  createdAt   DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?

  // Performance Metrics
  avgGenerationTime   Float? // Seconds per pose
  totalProcessingTime Float? // Total seconds

  // SECURITY FIX: Recovery tracking fields (P0 - Race Condition)
  recoveryAttempts Int       @default(0)
  lastRecoveryAt   DateTime?

  // Relations
  project        PoseGeneratorProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user           User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatar         Avatar?              @relation(fields: [avatarId], references: [id], onDelete: SetNull)
  poses          GeneratedPose[]
  poseSelections PoseSelection[]

  @@index([projectId])
  @@index([userId])
  @@index([userId, createdAt(sort: Desc)])
  @@index([status, createdAt])
  @@index([status, createdAt, queueJobId]) // Worker job selection
  @@index([status, startedAt]) // NEW: Worker recovery queries
  @@index([status, startedAt, queueJobId]) // NEW: Comprehensive worker recovery
  @@index([queueJobId])
  @@map("pose_generations")
}

model GeneratedPose {
  id            String  @id @default(cuid())
  generationId  String
  poseLibraryId String? // NULL for text-to-pose mode

  // Output
  outputImageUrl   String
  thumbnailUrl     String
  originalImageUrl String? // Before background change

  // Export Formats
  exportFormats Json // {instagram_story: "url", tiktok: "url", shopee: "url"}

  // Background Changer
  backgroundChanged Boolean @default(false)
  backgroundPrompt  String? @db.Text

  // AI Parameters
  promptUsed       String @db.Text
  seedUsed         Int?
  controlnetWeight Float  @default(0.75)

  // Quality Metrics
  generationTime    Float? // Seconds
  aiConfidenceScore Float? // 0.0-1.0

  // User Actions
  isFavorite    Boolean @default(false)
  downloadCount Int     @default(0)

  // Status
  status       String  @default("completed") // completed, failed
  errorMessage String? @db.Text

  // Recovery: Variation tracking
  variationKey String? // "poseId-v0", "poseId-v1", "text-v0" for duplicate detection

  createdAt DateTime @default(now())

  // Relations
  generation  PoseGeneration @relation(fields: [generationId], references: [id], onDelete: Cascade)
  poseLibrary PoseLibrary?   @relation(fields: [poseLibraryId], references: [id], onDelete: SetNull)

  @@unique([generationId, variationKey])
  @@index([generationId])
  @@index([poseLibraryId])
  @@index([status])
  @@index([isFavorite])
  @@index([generationId, variationKey])
  @@map("generated_poses")
}

model PoseSelection {
  id            String   @id @default(cuid())
  generationId  String
  poseLibraryId String
  createdAt     DateTime @default(now())

  // Relations
  generation  PoseGeneration @relation(fields: [generationId], references: [id], onDelete: Cascade)
  poseLibrary PoseLibrary    @relation(fields: [poseLibraryId], references: [id], onDelete: Cascade)

  @@unique([generationId, poseLibraryId]) // Prevent duplicate selections
  @@index([generationId])
  @@index([poseLibraryId])
  @@map("pose_selections")
}

model PoseRequest {
  id                String  @id @default(cuid())
  userId            String
  poseName          String
  description       String  @db.Text
  referenceImageUrl String?
  categoryId        String?
  useCase           String? // e-commerce, professional, social

  // Voting
  votesCount Int @default(0)

  // Status
  status     String  @default("pending") // pending, approved, in_progress, completed, rejected
  adminNotes String? @db.Text

  // Completion
  completedPoseId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  category PoseCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([status])
  @@index([votesCount(sort: Desc)])
  @@index([status, votesCount(sort: Desc)])
  @@map("pose_requests")
}

// ========================================
// Background Remover Pro Models
// ========================================

model BackgroundRemovalJob {
  id        String @id @default(cuid())
  userId    String
  batchId   String? // NULL for single jobs, set for batch items
  itemIndex Int? // Position in batch (0-499)

  // Status
  status String @default("pending") // pending, processing, completed, failed

  // Files
  originalUrl   String
  processedUrl  String?
  thumbnailUrl  String?
  originalSize  Int? // bytes
  processedSize Int? // bytes

  // Processing Details
  tier           String // basic, standard, professional, industry
  aiProvider     String? // huggingface, segmind
  modelName      String? // rmbg-1.4, rmbg-2.0, birefnet-general, birefnet-portrait
  creditsUsed    Int
  pricingType    String  @default("credit") // credit, subscription
  processingTime Int? // milliseconds

  // Error Handling
  errorMessage String? @db.Text
  retryCount   Int     @default(0)

  // Metadata
  metadata String? @db.Text // JSON: {width, height, format, etc}

  createdAt   DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?

  // Relations
  batch BackgroundRemovalBatch? @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([batchId])
  @@index([status])
  @@index([userId, createdAt(sort: Desc)])
  @@index([status, createdAt])
  @@index([batchId, itemIndex])
  @@map("background_removal_jobs")
}

model BackgroundRemovalBatch {
  id      String @id @default(cuid())
  userId  String
  batchId String @unique // User-friendly batch ID

  // Status
  status String @default("pending") // pending, processing, completed, failed, partial

  // Counts
  totalImages     Int
  processedImages Int @default(0)
  failedImages    Int @default(0)

  // Pricing
  tier               String // basic, standard, professional, industry
  totalCredits       Int
  discountPercentage Float  @default(0) // 0-20%
  originalPrice      Int // Before discount
  finalPrice         Int // After discount

  // Output
  zipUrl       String?
  zipSize      Int? // bytes
  zipGenerated Boolean @default(false)

  // Processing
  progressPercentage Float   @default(0) // 0-100
  estimatedTimeMs    Int? // Estimated total time
  processingTimeMs   Int? // Actual processing time

  // Notification
  notificationSent Boolean @default(false)
  emailSentAt      DateTime?

  // Error Handling
  errorMessage String? @db.Text

  createdAt   DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?

  // Relations
  jobs BackgroundRemovalJob[]

  @@index([userId])
  @@index([status])
  @@index([userId, createdAt(sort: Desc)])
  @@index([status, createdAt])
  @@map("background_removal_batches")
}

model BackgroundRemoverSubscription {
  id     String @id @default(cuid())
  userId String @unique

  // Plan Details
  plan         String // starter, pro
  status       String @default("active") // active, cancelled, expired, suspended
  monthlyPrice Int // Rupiah

  // Quotas
  dailyQuota             Int // Total daily removals
  professionalDailyQuota Int // Max professional tier per day
  allowedTiers           String[] // [basic, standard] or [basic, standard, professional, industry]

  // Billing
  subscribedAt    DateTime
  currentPeriodEnd DateTime
  nextBillingDate DateTime?
  cancelledAt     DateTime?
  cancelReason    String?

  // Auto-renewal
  autoRenew       Boolean @default(true)
  lastPaymentId   String?
  paymentMethod   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  usageRecords BackgroundRemoverSubscriptionUsage[]

  @@index([userId])
  @@index([status])
  @@index([currentPeriodEnd])
  @@index([status, currentPeriodEnd])
  @@map("background_remover_subscriptions")
}

model BackgroundRemoverSubscriptionUsage {
  id             String @id @default(cuid())
  subscriptionId String
  userId         String

  // Period Tracking
  date String // YYYY-MM-DD format for daily tracking

  // Usage by Tier
  tier          String // basic, standard, professional, industry
  removalsCount Int    @default(0)

  // Aggregate Stats
  totalCreditsEquivalent Int @default(0) // What it would have cost in credits

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  subscription BackgroundRemoverSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([subscriptionId, date, tier])
  @@index([subscriptionId])
  @@index([userId])
  @@index([date])
  @@index([subscriptionId, date])
  @@index([userId, date])
  @@map("background_remover_subscription_usage")
}
