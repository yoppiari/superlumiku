version: '3.8'

# ========================================
# Lumiku Backend - Docker Compose
# ========================================
#
# Multi-container deployment for Lumiku backend services:
# - API Server (Hono + WebSocket)
# - Pose Generator Worker (BullMQ)
# - PostgreSQL Database
# - Redis (Queue + Pub/Sub)
#
# Usage:
#   docker-compose up -d                 - Start all services
#   docker-compose down                  - Stop all services
#   docker-compose logs -f               - View logs
#   docker-compose ps                    - Check status
#   docker-compose restart pose-worker   - Restart specific service
#
# Production:
#   docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
#

services:
  # ========================================
  # PostgreSQL Database
  # ========================================
  postgres:
    image: postgres:15-alpine
    container_name: lumiku-postgres
    restart: unless-stopped
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      POSTGRES_DB: ${DB_NAME:-lumiku_production}
      POSTGRES_USER: ${DB_USER:-lumiku}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?Database password required}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-lumiku} -d ${DB_NAME:-lumiku_production}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lumiku-network

  # ========================================
  # Redis (Queue + Pub/Sub)
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: lumiku-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:?Redis password required}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lumiku-network

  # ========================================
  # API Server
  # ========================================
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: lumiku-api
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      # Application
      NODE_ENV: production
      PORT: 3000

      # Database
      DATABASE_URL: postgresql://${DB_USER:-lumiku}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-lumiku_production}

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      # Security
      JWT_SECRET: ${JWT_SECRET:?JWT secret required}
      CORS_ORIGIN: ${CORS_ORIGIN:-*}

      # External APIs
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY:?Hugging Face API key required}

      # Storage
      STORAGE_TYPE: ${STORAGE_TYPE:-local}
      UPLOAD_DIR: /app/uploads

      # Features
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - lumiku-network

  # ========================================
  # Pose Generator Worker
  # ========================================
  pose-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: lumiku-pose-worker
    restart: unless-stopped
    command: bun run src/apps/pose-generator/worker.ts
    environment:
      # Application
      NODE_ENV: production

      # Database
      DATABASE_URL: postgresql://${DB_USER:-lumiku}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-lumiku_production}

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      # Worker Configuration
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-5}
      WORKER_NAME: pose-generator-worker-1

      # External APIs
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY}

      # Storage
      STORAGE_TYPE: ${STORAGE_TYPE:-local}
      UPLOAD_DIR: /app/uploads

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_started
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    deploy:
      replicas: ${WORKER_REPLICAS:-1}
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    networks:
      - lumiku-network

  # ========================================
  # Optional: Additional Worker Instance
  # ========================================
  # Uncomment for higher throughput
  # pose-worker-2:
  #   extends: pose-worker
  #   container_name: lumiku-pose-worker-2
  #   environment:
  #     WORKER_NAME: pose-generator-worker-2

# ========================================
# Volumes
# ========================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/redis

# ========================================
# Networks
# ========================================
networks:
  lumiku-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
