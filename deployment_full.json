{"id":4807,"application_id":"108","application_name":"dev-superlumiku","build_server_id":null,"commit":"5f02f43019f63e25618d0550d098e6e15b1647cf","commit_message":"docs: Add quick deployment execution guide\n\nQuick reference for executing deployment with copy-paste commands.\nIncludes both automated and manual options.\n\n\ud83e\udd16 Generated with Claude Code\n\nCo-Authored-By: Claude <noreply@anthropic.com>","current_process_id":"1599029","deployment_url":"\/project\/sws0ckk\/environment\/wgcsog0wcog040cgssoow00c\/application\/d8ggwoo484k8ok48g8k8cgwk\/deployment\/rgwgwosss80sk84gkwogko4s","deployment_uuid":"rgwgwosss80sk84gkwogko4s","destination_id":"0","finished_at":"2025-10-10 09:13:57","force_rebuild":false,"git_type":null,"horizon_job_id":"f0f0894c-2ff9-4ec0-accb-a3eac444c27e","horizon_job_worker":"1b389385fea2","is_api":false,"is_webhook":false,"logs":"[{\"command\":null,\"output\":\"Starting deployment of yoppiari\\\/superlumiku:development to localhost.\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:12:20.477262Z\",\"hidden\":false,\"batch\":1},{\"command\":null,\"output\":\"Preparing container with helper image: ghcr.io\\\/coollabsio\\\/coolify-helper:1.0.11.\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:12:20.594926Z\",\"hidden\":false,\"batch\":1,\"order\":2},{\"command\":\"docker rm -f rgwgwosss80sk84gkwogko4s\",\"output\":\"Error response from daemon: No such container: rgwgwosss80sk84gkwogko4s\",\"type\":\"stderr\",\"timestamp\":\"2025-10-10T09:12:20.665605Z\",\"hidden\":true,\"batch\":1,\"order\":3},{\"command\":\"docker run -d --network coolify --name rgwgwosss80sk84gkwogko4s --rm -v \\\/root\\\/.docker\\\/config.json:\\\/root\\\/.docker\\\/config.json:ro -v \\\/var\\\/run\\\/docker.sock:\\\/var\\\/run\\\/docker.sock ghcr.io\\\/coollabsio\\\/coolify-helper:1.0.11\",\"output\":\"7f9f6366ecc71dfbfc1670678e11b0a33e3953f8bf43618cac100a963f4611f8\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:12:20.750555Z\",\"hidden\":true,\"batch\":2,\"order\":4},{\"command\":\"docker exec rgwgwosss80sk84gkwogko4s bash -c 'GIT_SSH_COMMAND=\\\"ssh -o ConnectTimeout=30 -p 22 -o Port=22 -o LogLevel=ERROR -o StrictHostKeyChecking=no -o UserKnownHostsFile=\\\/dev\\\/null\\\" git ls-remote https:\\\/\\\/github.com\\\/yoppiari\\\/superlumiku development'\",\"output\":\"5f02f43019f63e25618d0550d098e6e15b1647cf\\trefs\\\/heads\\\/development\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:12:22.328752Z\",\"hidden\":true,\"batch\":3,\"order\":5},{\"command\":null,\"output\":\"----------------------------------------\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:12:22.335537Z\",\"hidden\":false,\"batch\":1,\"order\":6},{\"command\":null,\"output\":\"Importing yoppiari\\\/superlumiku:development (commit sha HEAD) to \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s.\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:12:22.336711Z\",\"hidden\":false,\"batch\":1,\"order\":7},{\"command\":\"docker exec rgwgwosss80sk84gkwogko4s bash -c 'git clone -b \\\"development\\\" https:\\\/\\\/github.com\\\/yoppiari\\\/superlumiku \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s && cd \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s && sed -i \\\"s#git@\\\\(.*\\\\):#https:\\\/\\\/\\\\1\\\/#g\\\" \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s\\\/.gitmodules || true && cd \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s && GIT_SSH_COMMAND=\\\"ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=\\\/dev\\\/null\\\" git submodule update --init --recursive && cd \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s && GIT_SSH_COMMAND=\\\"ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=\\\/dev\\\/null\\\" git lfs pull'\",\"output\":\"Cloning into '\\\/artifacts\\\/rgwgwosss80sk84gkwogko4s'...\",\"type\":\"stderr\",\"timestamp\":\"2025-10-10T09:12:22.463996Z\",\"hidden\":true,\"batch\":4,\"order\":8},{\"command\":\"docker exec rgwgwosss80sk84gkwogko4s bash -c 'git clone -b \\\"development\\\" https:\\\/\\\/github.com\\\/yoppiari\\\/superlumiku \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s && cd \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s && sed -i \\\"s#git@\\\\(.*\\\\):#https:\\\/\\\/\\\\1\\\/#g\\\" \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s\\\/.gitmodules || true && cd \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s && GIT_SSH_COMMAND=\\\"ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=\\\/dev\\\/null\\\" git submodule update --init --recursive && cd \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s && GIT_SSH_COMMAND=\\\"ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=\\\/dev\\\/null\\\" git lfs pull'\",\"output\":\"sed: \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s\\\/.gitmodules: No such file or directory\",\"type\":\"stderr\",\"timestamp\":\"2025-10-10T09:12:25.102553Z\",\"hidden\":true,\"batch\":4,\"order\":9},{\"command\":\"docker exec rgwgwosss80sk84gkwogko4s bash -c 'cd \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s && git log -1 5f02f43019f63e25618d0550d098e6e15b1647cf --pretty=%B'\",\"output\":\"docs: Add quick deployment execution guide\\n\\nQuick reference for executing deployment with copy-paste commands.\\nIncludes both automated and manual options.\\n\\n\\ud83e\\udd16 Generated with Claude Code\\n\\nCo-Authored-By: Claude <noreply@anthropic.com>\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:12:25.411869Z\",\"hidden\":true,\"batch\":6,\"order\":10},{\"command\":\"docker images -q d8ggwoo484k8ok48g8k8cgwk:5f02f43019f63e25618d0550d098e6e15b1647cf 2>\\\/dev\\\/null\",\"output\":\"00529c2e714b\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:12:25.501285Z\",\"hidden\":true,\"batch\":7,\"order\":11},{\"command\":null,\"output\":\"No configuration changed & image found (d8ggwoo484k8ok48g8k8cgwk:5f02f43019f63e25618d0550d098e6e15b1647cf) with the same Git Commit SHA. Build step skipped.\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:12:25.510094Z\",\"hidden\":false,\"batch\":1,\"order\":12},{\"command\":\"docker exec rgwgwosss80sk84gkwogko4s bash -c 'cat \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s\\\/Dockerfile'\",\"output\":\"# ============================================\\n# Stage 1: Build Frontend\\n# ============================================\\nFROM node:20-alpine AS frontend-builder\\n\\nWORKDIR \\\/app\\\/frontend\\n\\n# Copy frontend package files\\nCOPY frontend\\\/package*.json .\\\/\\n\\n# Install ALL dependencies (including devDependencies for TypeScript build)\\nRUN npm install\\n\\n# Copy frontend source\\nCOPY frontend\\\/ .\\\/\\n\\n# Build frontend for production\\nRUN npm run build\\n\\n# Verify frontend build output exists\\nRUN ls -la dist\\\/ && \\\\\\n    test -f dist\\\/index.html || (echo \\\"ERROR: Frontend build failed - index.html not found!\\\" && exit 1)\\n\\n# ============================================\\n# Stage 2: Build Backend\\n# ============================================\\nFROM oven\\\/bun:1-alpine AS backend-builder\\n\\nWORKDIR \\\/app\\\/backend\\n\\n# Install build dependencies for canvas (requires Python and build tools)\\nRUN apk add --no-cache \\\\\\n    python3 \\\\\\n    make \\\\\\n    g++ \\\\\\n    cairo-dev \\\\\\n    jpeg-dev \\\\\\n    pango-dev \\\\\\n    giflib-dev \\\\\\n    pixman-dev\\n\\n# Copy backend package files\\nCOPY backend\\\/package.json backend\\\/bun.lock* .\\\/\\n\\n# Install ALL dependencies (including devDependencies for Prisma)\\nRUN bun install --frozen-lockfile\\n\\n# Copy backend source\\nCOPY backend\\\/ .\\\/\\n\\n# Generate Prisma Client\\nRUN bun run prisma:generate\\n\\n# ============================================\\n# Stage 3: Production Image\\n# ============================================\\nFROM oven\\\/bun:1-alpine\\n\\n# Install system dependencies (including canvas runtime dependencies and network tools)\\nRUN apk add --no-cache \\\\\\n    nginx \\\\\\n    ffmpeg \\\\\\n    ffmpeg-libs \\\\\\n    postgresql-client \\\\\\n    curl \\\\\\n    bash \\\\\\n    cairo \\\\\\n    jpeg \\\\\\n    pango \\\\\\n    giflib \\\\\\n    pixman \\\\\\n    bind-tools \\\\\\n    iputils\\n\\nWORKDIR \\\/app\\n\\n# Copy backend from builder\\nCOPY --from=backend-builder \\\/app\\\/backend .\\\/backend\\n\\n# Copy frontend dist from builder\\nCOPY --from=frontend-builder \\\/app\\\/frontend\\\/dist .\\\/frontend\\\/dist\\n\\n# Verify frontend files were copied\\nRUN ls -la \\\/app\\\/frontend\\\/dist\\\/ && \\\\\\n    test -f \\\/app\\\/frontend\\\/dist\\\/index.html || (echo \\\"ERROR: Frontend dist not copied correctly!\\\" && exit 1)\\n\\n# Copy root package.json if needed\\nCOPY package.json .\\\/\\n\\n# Copy Nginx configuration\\nCOPY docker\\\/nginx.conf \\\/etc\\\/nginx\\\/http.d\\\/default.conf\\n\\n# Copy scripts\\nCOPY docker\\\/docker-entrypoint.sh \\\/usr\\\/local\\\/bin\\\/\\nCOPY docker\\\/healthcheck.sh \\\/usr\\\/local\\\/bin\\\/\\nRUN chmod +x \\\/usr\\\/local\\\/bin\\\/docker-entrypoint.sh \\\/usr\\\/local\\\/bin\\\/healthcheck.sh\\n\\n# Create necessary directories\\nRUN mkdir -p \\\/app\\\/backend\\\/uploads \\\/app\\\/backend\\\/outputs \\\/var\\\/log\\\/nginx\\n\\n# Expose port (Nginx on 3000, Backend on 3001)\\nEXPOSE 3000\\n\\n# Health check\\nHEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \\\\\\n    CMD \\\/usr\\\/local\\\/bin\\\/healthcheck.sh\\n\\n# Set entrypoint\\nENTRYPOINT [\\\"\\\/usr\\\/local\\\/bin\\\/docker-entrypoint.sh\\\"]\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:12:26.113632Z\",\"hidden\":true,\"batch\":11,\"order\":13},{\"command\":null,\"output\":\"----------------------------------------\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:12:26.261815Z\",\"hidden\":false,\"batch\":1,\"order\":14},{\"command\":null,\"output\":\"Rolling update started.\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:12:26.263487Z\",\"hidden\":false,\"batch\":1,\"order\":15},{\"command\":\"docker exec rgwgwosss80sk84gkwogko4s bash -c 'SOURCE_COMMIT=5f02f43019f63e25618d0550d098e6e15b1647cf COOLIFY_FQDN=https:\\\/\\\/dev.lumiku.com COOLIFY_URL=dev.lumiku.com COOLIFY_BRANCH=development  docker compose --project-name d8ggwoo484k8ok48g8k8cgwk --project-directory \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s -f \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s\\\/docker-compose.yaml up --build -d'\",\"output\":\"time=\\\"2025-10-10T09:12:26Z\\\" level=warning msg=\\\"Found orphan containers ([d8ggwoo484k8ok48g8k8cgwk-090751890389]) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up.\\\"\",\"type\":\"stderr\",\"timestamp\":\"2025-10-10T09:12:26.476005Z\",\"hidden\":true,\"batch\":13,\"order\":16},{\"command\":\"docker exec rgwgwosss80sk84gkwogko4s bash -c 'SOURCE_COMMIT=5f02f43019f63e25618d0550d098e6e15b1647cf COOLIFY_FQDN=https:\\\/\\\/dev.lumiku.com COOLIFY_URL=dev.lumiku.com COOLIFY_BRANCH=development  docker compose --project-name d8ggwoo484k8ok48g8k8cgwk --project-directory \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s -f \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s\\\/docker-compose.yaml up --build -d'\",\"output\":\"Container d8ggwoo484k8ok48g8k8cgwk-091219185378  Creating\",\"type\":\"stderr\",\"timestamp\":\"2025-10-10T09:12:26.478107Z\",\"hidden\":true,\"batch\":13,\"order\":17},{\"command\":\"docker exec rgwgwosss80sk84gkwogko4s bash -c 'SOURCE_COMMIT=5f02f43019f63e25618d0550d098e6e15b1647cf COOLIFY_FQDN=https:\\\/\\\/dev.lumiku.com COOLIFY_URL=dev.lumiku.com COOLIFY_BRANCH=development  docker compose --project-name d8ggwoo484k8ok48g8k8cgwk --project-directory \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s -f \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s\\\/docker-compose.yaml up --build -d'\",\"output\":\"d8ggwoo484k8ok48g8k8cgwk-091219185378 Your kernel does not support memory swappiness capabilities or the cgroup is not mounted. Memory swappiness discarded.\",\"type\":\"stderr\",\"timestamp\":\"2025-10-10T09:12:26.510261Z\",\"hidden\":true,\"batch\":13,\"order\":18},{\"command\":\"docker exec rgwgwosss80sk84gkwogko4s bash -c 'SOURCE_COMMIT=5f02f43019f63e25618d0550d098e6e15b1647cf COOLIFY_FQDN=https:\\\/\\\/dev.lumiku.com COOLIFY_URL=dev.lumiku.com COOLIFY_BRANCH=development  docker compose --project-name d8ggwoo484k8ok48g8k8cgwk --project-directory \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s -f \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s\\\/docker-compose.yaml up --build -d'\",\"output\":\"Container d8ggwoo484k8ok48g8k8cgwk-091219185378  Created\",\"type\":\"stderr\",\"timestamp\":\"2025-10-10T09:12:26.512271Z\",\"hidden\":true,\"batch\":13,\"order\":19},{\"command\":\"docker exec rgwgwosss80sk84gkwogko4s bash -c 'SOURCE_COMMIT=5f02f43019f63e25618d0550d098e6e15b1647cf COOLIFY_FQDN=https:\\\/\\\/dev.lumiku.com COOLIFY_URL=dev.lumiku.com COOLIFY_BRANCH=development  docker compose --project-name d8ggwoo484k8ok48g8k8cgwk --project-directory \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s -f \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s\\\/docker-compose.yaml up --build -d'\",\"output\":\"Container d8ggwoo484k8ok48g8k8cgwk-091219185378  Starting\",\"type\":\"stderr\",\"timestamp\":\"2025-10-10T09:12:26.514298Z\",\"hidden\":true,\"batch\":13,\"order\":20},{\"command\":\"docker exec rgwgwosss80sk84gkwogko4s bash -c 'SOURCE_COMMIT=5f02f43019f63e25618d0550d098e6e15b1647cf COOLIFY_FQDN=https:\\\/\\\/dev.lumiku.com COOLIFY_URL=dev.lumiku.com COOLIFY_BRANCH=development  docker compose --project-name d8ggwoo484k8ok48g8k8cgwk --project-directory \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s -f \\\/artifacts\\\/rgwgwosss80sk84gkwogko4s\\\/docker-compose.yaml up --build -d'\",\"output\":\"Container d8ggwoo484k8ok48g8k8cgwk-091219185378  Started\",\"type\":\"stderr\",\"timestamp\":\"2025-10-10T09:12:26.730443Z\",\"hidden\":true,\"batch\":13,\"order\":21},{\"command\":null,\"output\":\"New container started.\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:12:26.736622Z\",\"hidden\":false,\"batch\":1,\"order\":22},{\"command\":null,\"output\":\"Custom healthcheck found, skipping default healthcheck.\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:12:26.738431Z\",\"hidden\":false,\"batch\":1,\"order\":23},{\"command\":null,\"output\":\"Waiting for healthcheck to pass on the new container.\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:12:26.739871Z\",\"hidden\":false,\"batch\":1,\"order\":24},{\"command\":null,\"output\":\"Healthcheck URL (inside the container): GET: http:\\\/\\\/localhost:3000\\\/\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:12:26.741351Z\",\"hidden\":false,\"batch\":1,\"order\":25},{\"command\":null,\"output\":\"Waiting for the start period (60 seconds) before starting healthcheck.\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:12:26.742683Z\",\"hidden\":false,\"batch\":1,\"order\":26},{\"command\":\"docker inspect --format='{{json .State.Health.Status}}' d8ggwoo484k8ok48g8k8cgwk-091219185378\",\"output\":\"\\\"starting\\\"\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:13:26.887254Z\",\"hidden\":true,\"batch\":14,\"order\":27},{\"command\":\"docker inspect --format='{{json .State.Health.Log}}' d8ggwoo484k8ok48g8k8cgwk-091219185378\",\"output\":\"[{\\\"Start\\\":\\\"2025-10-10T09:13:02.208549551Z\\\",\\\"End\\\":\\\"2025-10-10T09:13:02.258239535Z\\\",\\\"ExitCode\\\":1,\\\"Output\\\":\\\"\\u274c Nginx is not running\\\\n\\\"},{\\\"Start\\\":\\\"2025-10-10T09:13:07.258853761Z\\\",\\\"End\\\":\\\"2025-10-10T09:13:07.307636421Z\\\",\\\"ExitCode\\\":1,\\\"Output\\\":\\\"\\u274c Nginx is not running\\\\n\\\"},{\\\"Start\\\":\\\"2025-10-10T09:13:12.308568293Z\\\",\\\"End\\\":\\\"2025-10-10T09:13:12.348108837Z\\\",\\\"ExitCode\\\":1,\\\"Output\\\":\\\"\\u274c Nginx is not running\\\\n\\\"},{\\\"Start\\\":\\\"2025-10-10T09:13:17.348903299Z\\\",\\\"End\\\":\\\"2025-10-10T09:13:17.385596483Z\\\",\\\"ExitCode\\\":1,\\\"Output\\\":\\\"\\u274c Nginx is not running\\\\n\\\"},{\\\"Start\\\":\\\"2025-10-10T09:13:22.386677869Z\\\",\\\"End\\\":\\\"2025-10-10T09:13:22.436015371Z\\\",\\\"ExitCode\\\":1,\\\"Output\\\":\\\"\\u274c Nginx is not running\\\\n\\\"}]\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:13:26.955589Z\",\"hidden\":true,\"batch\":14,\"order\":28},{\"command\":null,\"output\":\"Attempt 1 of 3 | Healthcheck status: \\\"starting\\\"\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:13:26.957332Z\",\"hidden\":false,\"batch\":1,\"order\":29},{\"command\":null,\"output\":\"Healthcheck logs: \\u274c Nginx is not running\\n | Return code: 1\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:13:26.958982Z\",\"hidden\":false,\"batch\":1,\"order\":30},{\"command\":\"docker inspect --format='{{json .State.Health.Status}}' d8ggwoo484k8ok48g8k8cgwk-091219185378\",\"output\":\"\\\"healthy\\\"\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:13:57.144695Z\",\"hidden\":true,\"batch\":15,\"order\":31},{\"command\":\"docker inspect --format='{{json .State.Health.Log}}' d8ggwoo484k8ok48g8k8cgwk-091219185378\",\"output\":\"[{\\\"Start\\\":\\\"2025-10-10T09:13:07.258853761Z\\\",\\\"End\\\":\\\"2025-10-10T09:13:07.307636421Z\\\",\\\"ExitCode\\\":1,\\\"Output\\\":\\\"\\u274c Nginx is not running\\\\n\\\"},{\\\"Start\\\":\\\"2025-10-10T09:13:12.308568293Z\\\",\\\"End\\\":\\\"2025-10-10T09:13:12.348108837Z\\\",\\\"ExitCode\\\":1,\\\"Output\\\":\\\"\\u274c Nginx is not running\\\\n\\\"},{\\\"Start\\\":\\\"2025-10-10T09:13:17.348903299Z\\\",\\\"End\\\":\\\"2025-10-10T09:13:17.385596483Z\\\",\\\"ExitCode\\\":1,\\\"Output\\\":\\\"\\u274c Nginx is not running\\\\n\\\"},{\\\"Start\\\":\\\"2025-10-10T09:13:22.386677869Z\\\",\\\"End\\\":\\\"2025-10-10T09:13:22.436015371Z\\\",\\\"ExitCode\\\":1,\\\"Output\\\":\\\"\\u274c Nginx is not running\\\\n\\\"},{\\\"Start\\\":\\\"2025-10-10T09:13:27.436706266Z\\\",\\\"End\\\":\\\"2025-10-10T09:13:27.50012303Z\\\",\\\"ExitCode\\\":0,\\\"Output\\\":\\\"\\u2705 All health checks passed\\\\n\\\"}]\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:13:57.213757Z\",\"hidden\":true,\"batch\":15,\"order\":32},{\"command\":null,\"output\":\"Attempt 2 of 3 | Healthcheck status: \\\"healthy\\\"\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:13:57.215763Z\",\"hidden\":false,\"batch\":1,\"order\":33},{\"command\":null,\"output\":\"Healthcheck logs: \\u2705 All health checks passed\\n | Return code: 0\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:13:57.217247Z\",\"hidden\":false,\"batch\":1,\"order\":34},{\"command\":null,\"output\":\"New container is healthy.\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:13:57.221025Z\",\"hidden\":false,\"batch\":1,\"order\":35},{\"command\":null,\"output\":\"Removing old containers.\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:13:57.222607Z\",\"hidden\":false,\"batch\":1,\"order\":36},{\"command\":\"docker inspect -f '{{.State.Running}}' d8ggwoo484k8ok48g8k8cgwk-090751890389\",\"output\":\"true\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:13:57.507973Z\",\"hidden\":true,\"batch\":16,\"order\":37},{\"command\":\"docker rm -f d8ggwoo484k8ok48g8k8cgwk-090751890389\",\"output\":\"d8ggwoo484k8ok48g8k8cgwk-090751890389\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:13:57.844898Z\",\"hidden\":true,\"batch\":17,\"order\":38},{\"command\":null,\"output\":\"Rolling update completed.\",\"type\":\"stdout\",\"timestamp\":\"2025-10-10T09:13:57.848226Z\",\"hidden\":false,\"batch\":1,\"order\":39}]","only_this_server":false,"pull_request_id":0,"restart_only":false,"rollback":false,"server_id":0,"server_name":"localhost","status":"finished","created_at":"2025-10-10T09:12:19.000000Z","updated_at":"2025-10-10T09:13:58.000000Z"}