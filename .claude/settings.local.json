{
  "permissions": {
    "allow": [
      "Bash(bun prisma migrate dev:*)",
      "Bash(bun:*)",
      "Bash(curl:*)",
      "Bash(python:*)",
      "Bash(netstat:*)",
      "Bash(findstr:*)",
      "Bash(tasklist)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git config:*)",
      "Bash(git remote add:*)",
      "Bash(git branch:*)",
      "Bash(git push:*)",
      "Bash(docker ps:*)",
      "Bash(redis-server:*)",
      "Bash(choco:*)",
      "Bash(where redis-server)",
      "Bash(ffmpeg:*)",
      "Bash(test:*)",
      "Bash(timeout:*)",
      "Bash(powershell:*)",
      "Bash(wsl:*)",
      "Read(//c/Users/yoppi/Downloads/**)",
      "Bash(where memurai-cli)",
      "Bash(sc query:*)",
      "Bash(docker:*)",
      "Bash(dir uploads)",
      "Bash(dir:*)",
      "Bash(ffprobe:*)",
      "Bash(git log:*)",
      "Bash(git remote get-url:*)",
      "Bash(git mv:*)",
      "Bash(npx tsc:*)",
      "Bash(bunx tsc:*)",
      "Bash(bunx prisma migrate dev:*)",
      "Bash(cat:*)",
      "Bash(npm run type-check:*)",
      "Bash(unzip:*)",
      "Bash(sqlite3:*)",
      "Bash(DEBUG=1 bun run src/test-carousel-with-text.ts)",
      "Bash(for:*)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(done)",
      "Bash(DEBUG=1 bun run src/test-looping-comprehensive.ts)",
      "Bash(ffplay:*)",
      "Bash(taskkill:*)",
      "Bash(npm run build:*)",
      "Bash(npm run dev:*)",
      "WebFetch(domain:coolify.io)",
      "Bash(openssl rand:*)",
      "Bash(\"https://cf.avolut.com/api/v1/applications/jws8c80ckos00og0cos4cw8s/envs\")",
      "Bash(start \"\" \"ENV_VARIABLES_FOR_COOLIFY.txt\")",
      "Bash(start \"\" \"COOLIFY_ENV_PASTE.txt\")",
      "WebFetch(domain:docs.duitku.com)",
      "WebSearch",
      "Bash(start \"\" \"COOLIFY_ENV_CORRECTED.txt\")",
      "Bash(start \"\" \"DUITKU_CONFIGURATION_GUIDE.md\")",
      "Bash(start \"\" \"SETUP_DATABASE_REDIS_COOLIFY.md\")",
      "Bash(start \"\" \"FINAL_ENV_FOR_COOLIFY.txt\")",
      "Bash(git checkout:*)",
      "Bash(git merge:*)",
      "Bash(pip install:*)",
      "Bash(node:*)",
      "Read(//c/**)",
      "Bash(git pull:*)",
      "Bash(git cherry-pick:*)",
      "Bash(bunx prisma:*)",
      "Bash(scp:*)",
      "Bash(git reset:*)",
      "Bash(git stash:*)",
      "Bash(start \"\" \"IMPLEMENTASI_AI_COOLIFY_SEKARANG.md\")",
      "Bash(start \"\" \"COOLIFY_AI_ENV_COMPLETE.txt\")",
      "Bash(start \"\" \"DEPLOYMENT_SUCCESS_AI_SYSTEM.md\")",
      "Bash(start \"\" \"QUICK_TEST_GUIDE.md\")",
      "Bash(start \"\" \"FRONTEND_DEPLOYMENT_COMPLETE.md\")",
      "Bash(start \"\" \"AVATAR_CREATOR_PROJECT_SYSTEM_PLAN.md\")",
      "Bash(start \"\" \"AVATAR_CREATOR_IMPLEMENTATION_COMPLETE.md\")",
      "Bash(start \"\" \"DEPLOYMENT_GUIDE_AVATAR_PROJECTS.md\")",
      "Bash(start \"\" \"C:\\Users\\yoppi\\Downloads\\Lumiku App\\FINAL_DEPLOYMENT_REPORT_AVATAR_PROJECTS.md\")",
      "Bash(start \"\" \"dev-migration.sql\")",
      "Bash(start \"\" \"AVATAR_CREATOR_SUCCESS_SUMMARY.md\")",
      "Bash(start \"\" \"DEPLOYMENT_COMPLETE_FLUX_PREVIEW.md\")",
      "Bash(start \"\" \"COOLIFY_ENV_FLUX_UPDATE.txt\")",
      "Bash(start \"\" \"C:\\Users\\yoppi\\Downloads\\Lumiku App\\SOLUSI_DEPLOYMENT_DEV_LUMIKU.md\")",
      "Bash(\"https://cf.avolut.com/api/v1/applications/d8ggwoo484k8ok48g8k8cgwk\")",
      "Bash(\"https://cf.avolut.com/api/v1/deploy?uuid=d8ggwoo484k8ok48g8k8cgwk&force=true\")",
      "Bash(start \"\" \"C:\\Users\\yoppi\\Downloads\\Lumiku App\\DEPLOYMENT_SUCCESS_FLUX_PREVIEW.md\")",
      "Bash(start \"\" \"C:\\Users\\yoppi\\Downloads\\Lumiku App\\TROUBLESHOOT_400_ERROR.md\")",
      "Bash(start \"\" \"C:\\Users\\yoppi\\Downloads\\Lumiku App\\QUICK_TEST_GUIDE.md\")",
      "Bash(start \"\" \"C:\\Users\\yoppi\\Downloads\\Lumiku App\\test-create-project.js\")",
      "Bash(start \"\" \"C:\\Users\\yoppi\\Downloads\\Lumiku App\\FINAL_FIX_AVATAR_PROJECTS.md\")",
      "Bash(start \"\" \"C:\\Users\\yoppi\\Downloads\\Lumiku App\\fix-avatar-projects-table.sql\")",
      "Bash(start \"\" \"C:\\Users\\yoppi\\Downloads\\Lumiku App\\AVATAR_CREATOR_SUCCESS_SUMMARY.md\")",
      "Bash(start \"\" \"C:\\Users\\yoppi\\Downloads\\Lumiku App\\DEPLOYMENT_COMPLETE_AVATAR_FIX.md\")",
      "Bash(start \"\" \"C:\\Users\\yoppi\\Downloads\\Lumiku App\\RUN_MIGRATION_NOW.md\")",
      "Bash(start:*)",
      "Bash(where docker)",
      "Bash(find:*)",
      "Bash(git restore:*)",
      "WebFetch(domain:dev.lumiku.com)",
      "WebFetch(domain:stackoverflow.com)",
      "Bash(git rm:*)",
      "Bash(npx prisma migrate dev:*)",
      "Bash(head:*)",
      "Bash(npm outdated:*)",
      "Bash(mkdir:*)",
      "Bash(NODE_ENV=production bun:*)",
      "Bash(set NODE_ENV=production)",
      "Bash(set JWT_SECRET=)",
      "Bash(JWT_SECRET=\"test_secret_at_least_32_characters_long_abc123def456\" bun --eval \"import(''./src/config/env.ts'').then(m => console.log(''✅ env.ts loads successfully'')).catch(e => console.error(''❌ Error:'', e.message))\")",
      "Bash(JWT_SECRET=\"8d024b643b19488486b7aa1ab4dd0a1cf1566d76603252f659ce9bd905fc06e9\" bun --eval \"import(''./src/config/env.ts'').then(m => console.log(''✅ Secure JWT configuration loaded successfully''))\")",
      "Bash(verify-security-fixes.bat)",
      "Bash(cmd /c:*)",
      "Bash(chmod:*)",
      "Bash(bash:*)",
      "Bash(source:*)",
      "Bash(echo \"JWT_SECRET length: $#JWT_SECRET\")",
      "Bash(echo \"REDIS_PASSWORD length: $#REDIS_PASSWORD\")",
      "Bash(where tsc)",
      "Bash(ls:*)",
      "Bash(xargs rm:*)",
      "Bash(awk:*)",
      "Bash(tsc --noEmit)",
      "Bash(node_modules/.bin/tsc:*)",
      "Bash(git fetch:*)",
      "Bash(echo:*)",
      "Bash(npx prisma validate:*)",
      "Bash(docker-compose:*)",
      "Bash(npx prisma format:*)",
      "Bash(npx prisma generate:*)",
      "Bash(./node_modules/.bin/tsc.exe:*)",
      "Bash(npx prisma migrate:*)",
      "Bash(node_modules.bintsc --noEmit)",
      "Bash(./node_modules/.bin/tsc:*)",
      "Bash(pm2 logs:*)",
      "Bash(where:*)",
      "Bash(https://cf.avolut.com/api/v1/applications/d8ggwoo484k8ok48g8k8cgwk/envs )",
      "Bash(npm run test:*)",
      "Bash(do echo \"Check $i/12 (waiting 30 seconds)...\")",
      "Bash(git rev-parse:*)",
      "Bash(tree:*)",
      "Bash(rg:*)",
      "Bash(cd:*)",
      "Bash(npx tsx:*)",
      "Bash(npx prisma db push:*)",
      "Bash(npm run test:hf-api:*)",
      "Bash(claude mcp add:*)",
      "Bash(npm run dev:logs:*)",
      "Bash(psql:*)",
      "Bash(pg_isready:*)",
      "Bash(npm run seed:*)",
      "Bash(npm run db:status:*)"
    ],
    "deny": [],
    "ask": []
  }
}
